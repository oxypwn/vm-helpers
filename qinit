#!/bin/bash
#
# launcher script for qemu-kvm
# http://blog.falconindy.com/articles/build-a-virtual-army.html
#
# machines are sourced from a file which defines functions, each
# specifying options for the particular VM, for example:
#
# vm_beatbox() {
#   mac="de:ad:be:ef:00:09"
#   options=(-nographic)
# }
#
# If unspecified:
#   ${drives[@]}: will match all of "$imgroot/$vm".*.qcow2
# qemu-img create -f qcow2 ~/qemu-img/pcbsd.test.qcow2 50G
# Example: qinit -c beatbox 
#

### Paths ################################
#machines=${XDG_CONFIG_HOME:-$HOME/.config}/qemu/machines
machines=$HOME/Dropbox/vm-helpers/machines
iso_local_root=/tmp
imgroot=$HOME/qemu-img

### Defaults #############################
mem=(-m 2048)
cpus=(-cpu qemu64 -smp sockets=1,cores=2,threads=2)
vga=(-vga std)
iso_remote_root="http://ftp.lysator.liu.se/pub/archlinux/iso/2013.04.01"
iso_name=archlinux-2013.04.01-dual.iso
version="base"
mac=`(date; cat /proc/interrupts) | md5sum | sed -r 's/^(.{10}).*$/\1/; s/([0-9a-f]{2})/\1:/g; s/:$//;'`
### Launcher #############################

. "$machines"


function presetup()
{
if [ ! -d "$imgroot" ]; 
    then mkdir -p "$imgroot";
fi
while [ ! -e "$imgroot/$vm".*.qcow2 ]; do
    qemu-img create -f qcow2 "$imgroot/$vm"."$version".qcow2 50G
done
while [ ! -e $iso_local_root/$iso_name ]; do
    /usr/bin/curl -fL $iso_remote_root/$iso_name -o $iso_local_root/$iso_name
done
}

while getopts 'cd:' flag; do
  case $flag in
    c) usecdrom=1 ;;
    d) iso=$OPTARG ;;
  esac
done
shift $(( OPTIND - 1 ))

if [[ -z $1 ]]; then
  printf 'Available VMs:\n'
  compgen -A function -- vm_ | sed 's/^vm_/   /'
  exit 0
fi

vm=$1; shift
if ! type -t vm_$vm >/dev/null; then
  printf 'unknown VM: %s\n' "$vm"
  exit 1
fi

vm_$vm

cdrom=(-cdrom "$iso" -boot d)
net=(-net vde -net nic,model=virtio,macaddr="$mac")

opts+=("${cpus[@]}" "${mem[@]}" "${net[@]}" "${vga[@]}" "${options[@]}")

if (( usecdrom )); then
  presetup
  iso=$iso_local_root/$iso_name
  opts+=(-cdrom "$iso" -boot d)
fi

# default drives
if (( ${#drives[*]} == 0 )); then
  for drive in "$imgroot/$vm".*.qcow2; do
    opts+=("-drive" "file=$drive,if=virtio,aio=native")
  done
else
  opts+=("${drives[@]}")
fi


#exec kvm "${opts[@]}" "$@"

exec qemu-system-x86_64 "${opts[@]}" "$@"

